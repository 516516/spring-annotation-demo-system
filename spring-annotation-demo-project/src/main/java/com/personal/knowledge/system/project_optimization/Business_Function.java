package com.personal.knowledge.system.project_optimization;

public class Business_Function {
    //网约车拍照申请：2000多个，在一个城市运营就要

    public static void main(String[] args) {
        //1.注册(发短信)、登录（网官API、token存储）
        //2.客户端和服务端时间同步，大问题（App端和服务端时间同步问题）
        //3.具体业务开发 CRUD

        //架构师相关问题?
        //1.服务边界
        //2.服务扩展性
        //3.系统的变化点

        //项目相关问题?
        //1.订单状态扭转--幂等怎么做的?
        //2.订单金额存储--bigint 以分为单位    计算--BigDecimal
        //3.订单号怎么生成的?
        //4.订单信息怎么储存的?
        //5.对接三方平台怎么对接的? 数据库设计? 流程设计? 为什么要怎么设计?
        //6.如何解决并发接单的?
        //7.价格计算规则是怎么设计的? 实际支付金额、订单金额、优惠券金额
        //8.订单存储商品快照，为什么?
        //9.促销高峰期，如何保证下单正常，不发生超卖，一人限买一单?
        //10.不同类型的订单采用什么设计模式? 抽象工厂模式
        //11.分布式锁分布式事务，保证数据一致性?如何实现，如何保证性能?
        //12.如何防止刷单?
        //13.订单号作分布式ID么?
        //14.派单，一个订单派单会派给5个司机,一个订单被一个司机处理，怎么设计?
//        派单系统：redis.set("业务+driverId",orderId)   司机端：redis.getKey()  还有什么设计方案?
        //15.分布式锁、分布式ID、分布式事务
        //16.多个服务竞争一个资源,,如何加分布式锁?
        //17.订单什么时候生成? 支付前还是支付后?
        //18.黑名单怎么设计? app设备号、手机号、用户实名信息
        //19.订单生命周期扭转? 扩展性考虑 状态机模式：操作前状态+事件，关于订单状态的设计有什么改进?
//        状态只能前进，不能后退
        //20.设计模式：
//        好处：设计归类，代码复用
//        坏处：代码量变大、不容易交接、不易维护
        //21.支付金额校验? 等等
        //22.同步三方系统  三方同步成功，回调我方接口失败，怎么办?
        //23.消息队列里 重复消费问题怎么解决?
        //24.OSS 对象存储
        //25.review代码，优化慢查询，提升查询效率

        //26.个人职责：
//        遇到什么问题?
//        你是如何解决的?  结果怎么样?
//        当时还考虑了哪些解决办法?  为什么选择这一种方法?

    }
}